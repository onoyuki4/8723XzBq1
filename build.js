// build.js
const fs = require('fs'); // 파일 시스템 모듈
const path = require('path'); // 경로 관련 모듈

const worksDir = path.join(__dirname, 'works'); // 'works' 폴더 경로
const worksList = []; // 메인 페이지용 작품 데이터 목록
const ignoreFolders = ['work01']; // <<<--- 혹시 build.js가 처리하지 않아야 할 폴더 이름이 있다면 여기에 추가 (예: ['work00'])

console.log('빌드를 시작합니다...');

try {
    // 1. 'works' 폴더 읽기 (ignoreFolders 제외)
    const workFolders = fs.readdirSync(worksDir, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory() && !ignoreFolders.includes(dirent.name)) // 디렉토리 & 무시 목록 제외
        .map(dirent => dirent.name); // 디렉토리 이름만 추출

    console.log(`총 ${workFolders.length}개의 작품 폴더를 처리합니다.`);

    // 2. 각 작품 폴더 처리
    workFolders.forEach(folderName => {
        const workFolderPath = path.join(worksDir, folderName);
        const workId = folderName; // 폴더 이름을 ID로 사용
        let workTitle = folderName; // 기본 제목은 폴더 이름
        let workAuthor = 'Unknown'; // 기본 작가
        let imageFiles = [];

        console.log(`- 작품 폴더 처리 중: ${folderName}`);

        try {
            // 2-1. 메타데이터 파일 읽기 (제목, 작가)
            const metaFilePath = path.join(workFolderPath, 'metadata.json');
            if (fs.existsSync(metaFilePath)) {
                const metaData = JSON.parse(fs.readFileSync(metaFilePath, 'utf-8'));
                workTitle = metaData.title || workTitle;
                workAuthor = metaData.author || workAuthor;
                console.log(`  > 메타데이터 로드: 제목="${workTitle}", 작가="${workAuthor}"`);
            } else {
                console.warn(`  > 경고: ${folderName}/metadata.json 파일이 없습니다. 기본값을 사용합니다.`);
            }

            // 2-2. 이미지 파일 목록 읽기 및 정렬 (01.*, 02.* 등 패턴)
            const filesInFolder = fs.readdirSync(workFolderPath);
            imageFiles = filesInFolder
                // 파일 이름 패턴: 숫자 두 자리 이상으로 시작하고, 특정 확장자를 가짐
                .filter(file => /^\d{2,}\.(png|jpg|jpeg|webp|gif)$/i.test(file))
                // 숫자 기준으로 정렬 (중요!)
                .sort((a, b) => {
                    // 파일 이름에서 숫자 부분만 추출하여 정수로 변환 후 비교
                    const numA = parseInt(a.match(/^\d+/)?.[0] || '0', 10); // 숫자가 없으면 0으로 처리
                    const numB = parseInt(b.match(/^\d+/)?.[0] || '0', 10);
                    return numA - numB;
                });

            if (imageFiles.length === 0) {
                console.warn(`  > 경고: ${folderName} 폴더에서 정렬 규칙에 맞는 이미지 파일을 찾을 수 없습니다.`);
                // 이미지가 없어도 config.js는 생성될 수 있음 (빈 배열)
            } else {
                console.log(`  > 이미지 ${imageFiles.length}개 감지.`);
            }


            // 2-3. config.js 파일 생성 또는 덮어쓰기
            // JSON.stringify를 사용하여 문자열 내 특수문자(따옴표 등) 처리
            const configContent = `// Auto-generated by build.js
const workConfig = {
title: ${JSON.stringify(workTitle)},
author: ${JSON.stringify(workAuthor)},
images: ${JSON.stringify(imageFiles, null, 2)} // 감지된 이미지 목록 배열
};`;
            const configPath = path.join(workFolderPath, 'config.js');
            fs.writeFileSync(configPath, configContent, 'utf-8');
            console.log(`  > ${configPath} 생성/업데이트 완료.`);

            // 2-4. 메인 페이지용 데이터 추가 (이미지가 하나라도 있어야 추가)
            if (imageFiles.length > 0) {
                worksList.push({
                    id: workId,
                    title: workTitle,
                    author: workAuthor,
                    firstImage: imageFiles[0] // 정렬된 목록의 첫 번째 이미지
                });
            } else {
                 console.warn(`  > 이미지가 없어 메인 목록에서 제외합니다: ${folderName}`);
            }

        } catch (err) {
            console.error(`  > 오류 발생 (${folderName}):`, err.message);
        }
    });

    // 3. 메인 페이지용 works-list.js 파일 생성
    if (worksList.length > 0) {
        // id 기준 정렬 (폴더 이름순)
        worksList.sort((a, b) => a.id.localeCompare(b.id));

        const worksListContent = `// Auto-generated by build.js
const worksData = ${JSON.stringify(worksList, null, 2)};`;
        const worksListPath = path.join(__dirname, 'works-list.js'); // 루트 폴더에 생성
        fs.writeFileSync(worksListPath, worksListContent, 'utf-8');
        console.log(`\n메인 페이지용 작품 목록 파일 생성 완료: ${worksListPath}`);
    } else {
        console.warn('\n처리할 작품이 없어 메인 페이지 목록 파일을 생성하지 않았습니다.');
    }

    console.log('\n빌드를 성공적으로 완료했습니다.');

} catch (error) {
    console.error('\n빌드 중 오류가 발생했습니다:', error);
}
